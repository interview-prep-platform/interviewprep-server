[
  {
    "question": "What is a static variable?",
    "answer": "A variable that is shared by all classes",
    "source": "dzone.com, DeepDive"
  },
  {
    "question": "If I change the order of a method’s modifiers, will it still work?  Is public static void main the same as public void static main?  What about void static public main?",
    "answer": "Yes (void has to be right in front of main), otherwise it works, but the convention is to put the visibility modifier at the start",
    "source": "dzone.com, Nick Bennett"
  },
  {
    "question": "If we don’t specify public, private, or protected, what is the default visibility?",
    "answer": "package private is the default",
    "source": "Deep Dive"
  },
  {
    "question": "When would you pick an ArrayList versus LinkedList?",
    "answer": "ArrayList still has indexing like an array, but can increase its size as add things. LinkedList references chains of objects.  ArrayList is faster if you know the access, LinkedList better if you are reading from the end or adding to the end.  If you need to retrieve or get values from somewhere in the middle of the structure, then ArrayList is faster.  If you are going through a list in order, then use a LinkedList, but if you are adding to middle, then want to use ArrayList.",
    "source": "DeepDive"
  },
  {
    "question": "What are the different access modifiers and what do they mean?",
    "answer": "Private: only see within class.  Public: anyone anywhere can see itProtected: package private plus subclasses of those class, then no one else can see it.  (includes the subclasses of the class).  Package private: only be accessed within the package.",
    "source": "DeepDive"
  },
  {
    "question": "What is the default access modifier for an interface?",
    "answer": "Public",
    "source": "DeepDive"
  },
  {
    "question": "What is the default access modifier for an enum?",
    "answer": "Package private, but constructor is private.",
    "source": "DeepDive"
  },
  {
    "question": "If you want to prevent your classes or methods from being overridden, how would you do that?",
    "answer": "Add final to it. (can’t inherit from it).  Final: stops inheritance to class or method.",
    "source": "DeepDive"
  },
  {
    "question": "What is an immutable object?",
    "answer": "An object can’t be modified.",
    "source": "DeepDive"
  },
  {
    "question": "What is the difference between overloading and overriding?",
    "answer": "Overloading is where change the method signature. Overriding is when put different functionality into a method.",
    "source": "DeepDive"
  },
  {
    "question": "Can a constructor be overridden?",
    "answer": "No",
    "source": "DeepDive"
  },
  {
    "question": "Can static methods be overridden?",
    "answer": "No",
    "source": "DeepDive"
  },
  {
    "question": "Does java support multiple inheritance?",
    "answer": "No.  A class can only extend one class.",
    "source": "DeepDive"
  },
  {
    "question": "Can one class implement multiple interfaces?",
    "answer": "Yes.",
    "source": "DeepDive"
  },
  {
    "question": "What is an abstract class?",
    "answer": "A class cannot be instantiated.",
    "source": "DeepDive"
  },
  {
    "question": "Can you extend an abstract class?",
    "answer": "Yes",
    "source": "DeepDive"
  },
  {
    "question": "Does java support goto?",
    "answer": "No",
    "source": "DeepDive"
  },
  {
    "question": "What is typically inflated to construct a menu of options presented to the user in the Android UI—e.g. in a navigation drawer, or in the action bar at the top of the screen?",
    "answer": "An XML document with a <menu> element root and zero or more <item> or <group> child elements.",
    "source": "DeepDive"
  },
  {
    "question": "Android resources (including layouts, menus, strings, etc.) may be customized using qualifiers for which of the following?",
    "answer": "Whether the Gmail app is installed or not, User country/region, Device manufacturer, Screen orientation, Screen size",
    "source": "DeepDive"
  },
  {
    "question": "Explain the build process in Android?",
    "answer": "The build process in Android involves three steps: The first step consists of the compilation of the resources folder using the Android Asset Packaging Tool (AAPT). These are compiled into a single class file known as R.java, which only holds constants, In the second step, the java source code needs to be compiled to .class files using javac, which are then converted to Dalvik bytecode using the ‘dx’ tool, which is one of the tools in the software development kit. The final output file is classes.ex., In the third and final step, the Android apkbuilder is required to take all the inputs and build the Android Packaging Key (APK) file.",
    "source": "https://hackr.io/blog/android-interview-questions"
  },
  {
    "question": "List some languages that can be used to program in Android",
    "answer": "Java, Kotlin, C#, Python",
    "source": "https://hackr.io/blog/android-interview-questions"
  },
  {
    "question": "Describe the lifecycle of an activity",
    "answer": "OnCreate(): Here, the views are created and data is collected from bundles. OnStart(): It is called if the activity is visible to the user. It may be succeeded by onResume() if the activity reaches the foreground and onStop() if it converts into hidden.. OnResume(): It is called when the activity starts an interaction with the user. OnPause(): This is called when the activity is going to the background but hasn’t been killed yet. OnStop(): This is called when you are no longer visible to the user. OnDestroy(): Called when the activity is finishing. OnRestart(): Called after the activity has been stopped, prior to it being started again",
    "source": "https://hackr.io/blog/android-interview-questions"
  },
  {
    "question": "What is Android Runtime?",
    "answer": "Android Runtime (ART) is an application used by the Android OS as a runtime environment. It has now replaced Dalvik, a discontinued process Virtual Machine (VM). ART translates the bytecode of the application into native instructions, which are carried out by the device’s runtime environment",
    "source": "https://hackr.io/blog/android-interview-questions"
  },
  {
    "question": "What is Context?",
    "answer": "Activity Context: This context is attached to the lifecycle of an activity. It should be used when you are passing the context in the scope of an activity or you need the context whose lifecycle is attached to the current context.Application Context: This context is attached to the lifecycle of an application. The application context can be used where you need a context whose lifecycle is separate from the current context or when you are passing a context beyond the scope of activity.",
    "source": "https://hackr.io/blog/android-interview-questions"
  }
]